#!/bin/env python

import argparse
import os
import json
import subprocess
import sys

from path import Path


IGNORE = [
 "apostrophe_typographique",
 "typo_guillemets_typographiques_doubles_ouvrants",
 "typo_guillemets_typographiques_doubles_fermants",
 "typo_guillemets_typographiques_simples_ouvrants",
 "typo_guillemets_typographiques_simples_fermants",
 "esp_d√©but_ligne",
]



def run_grammalecte(file_path):
    process = subprocess.run(
        ["grammalecte-cli", "--file", file_path, "--json", "--context"],
        stdout=subprocess.PIPE,
        text=True,
        check=True,
    )
    return json.loads(process.stdout)


class Diagnostic:
    def __init__(self, details, line, column):
        self.line = line
        self.column = column
        self.details = details

    @classmethod
    def from_grammar_error(cls,grammalecte_error, index):
        column = grammalecte_error['nStart'] + 1
        rule_id = grammalecte_error['sRuleId']
        line = index + 1
        return cls(rule_id, line, column)

    @classmethod
    def from_spelling_error(cls,grammalecte_error, index):
        details = f"spelling_error: {grammalecte_error['sValue']}"
        column = grammalecte_error['nStart'] + 1
        line = index + 1
        return cls(details, line, column)

    def __str__(self):
        return f"{self.line}:{self.column} error: {self.details}"



def handle_line(index, line):
    for kind in "grammar", "spelling":
        key = f"l{kind.title()}Errors"
        errors = line[key]
        for error in errors:
            func = f"from_{kind}_error"
            diagnostic = getattr(Diagnostic, func)(error, index)
            yield diagnostic


def find_opening_block(lines, index):
    for i in range(index, 0, -1):
        candidate = lines[i]
        if candidate.startswith("```"):
            return True

def find_closing_block(lines, index, end):
    for i in range(index, end):
        candidate = lines[i]
        if candidate.startswith("```"):
            return True

def inside_code(contents, index):
    lines = contents.splitlines()
    line = lines[index-1]
    end = len(lines)
    open_block = find_opening_block(lines, index)
    closing_block= find_closing_block(lines, index, end)
    if open_block and closing_block:
        return True

def process(file_path):
    grammalecte_out = run_grammalecte(file_path)
    contents = file_path.text()
    data = grammalecte_out["data"]
    for index, line in enumerate(data):
        if inside_code(contents, index):
            continue
        yield from handle_line(index, line)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("file_path", type=Path)
    args = parser.parse_args()
    file_path = args.file_path
    diagnostics = process(file_path)
    for diagnostic in diagnostics:
        if diagnostic.details in IGNORE:
            continue
        print(f"{file_path}:{diagnostic}")


if __name__ == "__main__":
    main()
